$PROJ_ROOT/builds/llvm-project/build-x86/bin/mlir-opt \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_0_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_0_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_0_Best" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_1_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_1_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(67174464), op_send(0)], s1c=[op_send_literal(14),op_send_literal(67174464), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_64_64_64_1_Best" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_2_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_2_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_2_Best" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_3_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_3_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_3_Best" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_4_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_4_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_4_Best" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(15),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Ns_64_64_64_5_NsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_5_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(67174464), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(67174464), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=64,64,64 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_64_64_64_5_Best" \
  -cse -test-accel-to-axi4mlir \
  -convert-linalg-to-loops -lower-affine --buffer-loop-hoisting --buffer-deallocation \
  -convert-scf-to-cf \
  -arith-expand \
  -memref-expand \
  -convert-vector-to-llvm \
  -convert-memref-to-llvm="index-bitwidth=$BITW" \
  -convert-scf-to-cf \
  -convert-arith-to-llvm="index-bitwidth=$BITW" \
  -convert-std-to-llvm="index-bitwidth=$BITW" \
  -canonicalize \
  -reconcile-unrealized-casts \
  ./srcs/mlir_matmuls.mlir \
  -o $OUTDIR/llvm_acc${ACCEL_SIZE}_${ACCEL_TYPE}.mlir \
  -print-ir-after-all 2>&1 | cat > $OUTDIR/intermediate_acc${ACCEL_SIZE}_${ACCEL_TYPE}.mlir

