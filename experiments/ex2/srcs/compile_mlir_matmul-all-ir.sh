$PROJ_ROOT/builds/llvm-project/build-x86/bin/mlir-opt \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_0_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_0_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_0_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33685536), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33685536), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,128,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_128_32_0_Optimal" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_1_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_1_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_1_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33685536), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33685536), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,128,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_128_32_1_Optimal" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_2_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_2_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_2_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587328), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587328), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=128,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_128_32_32_2_Optimal" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_3_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_3_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_3_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587328), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587328), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=128,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_128_32_32_3_Optimal" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_4_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_4_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_4_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587328), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587328), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=128,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_128_32_32_4_Optimal" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,2,1 opcode-map=\"opcode_map<s0=[op_send_literal(1),op_send_literal(33587232), op_send(0)], s1c=[op_send_literal(14),op_send_literal(33587232), op_send(1)], r=[op_recv(2)]>\" opcode-flow=\"(s0 (s1c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_As_32_32_32_5_AsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33587232), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33587232), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_32_32_5_BsquareTile" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=0,1,2 opcode-map=\"opcode_map<s=[op_send_literal(7),op_send_literal(33587232), op_send(0), op_send(1)], r=[op_send_literal(8),op_send_literal(33587232), op_recv(2)]>\" opcode-flow=\"((s) r)\" accel-tile-sizes=32,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Cs_32_32_32_5_CsquareTiles" \
  -test-generic-to-accel="anchor-op=linalg.matmul loop-permutation=1,2,0 opcode-map=\"opcode_map<s1=[op_send_literal(2),op_send_literal(33685536), op_send(1)], s0c=[op_send_literal(13),op_send_literal(33685536), op_send(0)], r=[op_recv(2)]>\" opcode-flow=\"(s1 (s0c r))\" accel-tile-sizes=128,32,32 accel-tile-size=${ACCEL_SIZE} acc-on-cpu=2  anchor-filter=ACC_v4_Bs_32_128_32_5_Optimal" \
  -cse -test-accel-to-axi4mlir \
  -convert-linalg-to-loops -lower-affine --buffer-loop-hoisting --buffer-deallocation \
  -convert-scf-to-cf \
  -arith-expand \
  -memref-expand \
  -convert-vector-to-llvm \
  -convert-memref-to-llvm="index-bitwidth=$BITW" \
  -convert-scf-to-cf \
  -convert-arith-to-llvm="index-bitwidth=$BITW" \
  -convert-std-to-llvm="index-bitwidth=$BITW" \
  -canonicalize \
  -reconcile-unrealized-casts \
  ./srcs/mlir_matmuls.mlir \
  -o $OUTDIR/llvm_acc${ACCEL_SIZE}_${ACCEL_TYPE}.mlir \
  -print-ir-after-all 2>&1 | cat > $OUTDIR/intermediate_acc${ACCEL_SIZE}_${ACCEL_TYPE}.mlir
