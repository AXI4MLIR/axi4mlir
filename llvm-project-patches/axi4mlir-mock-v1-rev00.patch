diff --git a/mlir/include/mlir/ExecutionEngine/RunnerUtils.h b/mlir/include/mlir/ExecutionEngine/RunnerUtils.h
index 9d612c14c..82348e6e9 100644
--- a/mlir/include/mlir/ExecutionEngine/RunnerUtils.h
+++ b/mlir/include/mlir/ExecutionEngine/RunnerUtils.h
@@ -398,4 +398,99 @@ extern "C" MLIR_RUNNERUTILS_EXPORT int64_t verifyMemRefF64(int64_t rank,
                                                            void *actualPtr,
                                                            void *expectedPtr);
 
+// =============================================================================
+// AXI_APIV1
+// =============================================================================
+
+//-----------------DMA Functions-----------------
+/**
+ * - dma_address is base address of dma
+ * - dma_input_addr is starting memory location for the dma input buffer,
+ * - dma_input_buffer_size is length of the buffer 
+ * - dma_output_addr is starting memory location for the dma output buffer, 
+ * - dma_output_buffer_size is length of the buffer
+ * 
+ * 
+ * Runs starting controls signals and sets MMS2, S2MM address registers to start
+ * memory locations of the input and output buffers
+ */
+
+extern "C" MLIR_RUNNERUTILS_EXPORT void
+dma_init(unsigned int dma_address, unsigned int dma_input_address,
+         unsigned int dma_input_buffer_size, unsigned int dma_output_address,
+         unsigned int dma_output_buffer_size);
+
+// Memory unmaps DMA control_register_address and Input and output buffers
+extern "C" MLIR_RUNNERUTILS_EXPORT void dma_free();
+
+//================================================================================================================
+
+//-----------------BUFFER Functions-----------------
+// Get the MMap address of the input buffer of the dma  *Needed to copy data to
+// Input_Buffer*
+extern "C" MLIR_RUNNERUTILS_EXPORT unsigned int *dma_get_inbuffer();
+
+// Get the MMap address of the output buffer of the dma *Needed to copy data
+// from Output_Buffer*
+extern "C" MLIR_RUNNERUTILS_EXPORT unsigned int *dma_get_outbuffer();
+
+//================================================================================================================
+
+//-----------------BUFFER Functions-----------------
+// Copy data into the Input Buffer (length to write, offset to write to) returns
+// 0 if successful
+extern "C" MLIR_RUNNERUTILS_EXPORT int
+dma_copy_to_inbuffer(unsigned int *host_src_address, int data_length,
+                     int offset);
+
+// Copy data from the Output Buffer (length to read, offset to read from)
+// returns 0 if successful
+extern "C" MLIR_RUNNERUTILS_EXPORT int
+dma_copy_from_outbuffer(unsigned int *host_dst_address, int data_length,
+                        int offset);
+
+//================================================================================================================
+
+//-----------------DMA MMS2 Functions-----------------
+/**
+ * Checks if input buffer size is >= length
+ * Sets DMA MMS2 transfer length to length
+ * Starts transfers to the accelerator using dma associated with dma_id
+ * Return 0 if successful, returns negative if error occurs
+ */
+extern "C" MLIR_RUNNERUTILS_EXPORT int dma_start_send(int length, int offset);
+// extern "C" MLIR_RUNNERUTILS_EXPORT void dma_start_send(int length, int offset);
+// extern "C" MLIR_RUNNERUTILS_EXPORT void dma_start_send();
+
+// Same as dma_send but thread does not block, returns if 0
+extern "C" MLIR_RUNNERUTILS_EXPORT int dma_check_send();
+
+// Blocks thread until dma MMS2 transfer is complete
+extern "C" MLIR_RUNNERUTILS_EXPORT void dma_wait_send();
+
+
+
+//-----------------DMA S2MM Functions-----------------
+/**
+ * Checks if buffer size is >= length
+ * Sets 2SMM store length
+ * Starts storing data recieved through dma associated with dma_id
+ * Return 0 if successful, returns negative if error occurs
+ */
+extern "C" MLIR_RUNNERUTILS_EXPORT int dma_start_recv(int length, int offset);
+
+// Blocks thread until dma S2MM transfer is complete (TLAST signal is seen)
+extern "C" MLIR_RUNNERUTILS_EXPORT void dma_wait_recv();
+
+// Same as dma_recv but thread does not block, returns if 0
+extern "C" MLIR_RUNNERUTILS_EXPORT int dma_check_recv();
+
+// Unexposed to MLIR
+extern "C" MLIR_RUNNERUTILS_EXPORT unsigned int
+dma_set(unsigned int *dma_virtual_address, int offset, unsigned int value);
+
+// Unexposed to MLIR
+extern "C" MLIR_RUNNERUTILS_EXPORT unsigned int
+dma_get(unsigned int *dma_virtual_address, int offset);
+
 #endif // EXECUTIONENGINE_RUNNERUTILS_H_
diff --git a/mlir/lib/ExecutionEngine/RunnerUtils.cpp b/mlir/lib/ExecutionEngine/RunnerUtils.cpp
index 83ead7c57..1c6599f5c 100644
--- a/mlir/lib/ExecutionEngine/RunnerUtils.cpp
+++ b/mlir/lib/ExecutionEngine/RunnerUtils.cpp
@@ -154,3 +154,86 @@ extern "C" int64_t verifyMemRefF64(int64_t rank, void *actualPtr,
   UnrankedMemRefType<double> expectedDesc = {rank, expectedPtr};
   return _mlir_ciface_verifyMemRefF64(&actualDesc, &expectedDesc);
 }
+
+// =============================================================================
+// AXI_APIV1
+// =============================================================================
+
+extern "C" void dma_init(unsigned int dma_address,
+                         unsigned int dma_input_address,
+                         unsigned int dma_input_buffer_size,
+                         unsigned int dma_output_address,
+                         unsigned int dma_output_buffer_size) {
+  std::cout << "Called: " << __func__ << std::endl;
+  std::cout << "\t" << dma_address << std::endl;
+  std::cout << "\t" << dma_input_address << std::endl;
+  std::cout << "\t" << dma_input_buffer_size << std::endl;
+  std::cout << "\t" << dma_output_address << std::endl;
+  std::cout << "\t" << dma_output_buffer_size << std::endl;
+}
+
+extern "C" void dma_free() { std::cout << "Called: " << __func__ << std::endl; }
+
+extern "C" unsigned int *dma_get_inbuffer() {
+
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" unsigned int *dma_get_outbuffer() {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" int dma_copy_to_inbuffer(unsigned int *host_src_address,
+                                    int data_length, int offset) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" int dma_copy_from_outbuffer(unsigned int *host_dst_address,
+                                       int data_length, int offset) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" int dma_start_send(int length, int offset) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+
+
+extern "C" int dma_check_send() {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" void dma_wait_send() {
+  std::cout << "Called: " << __func__ << std::endl;
+}
+
+extern "C" int dma_start_recv(int length, int offset) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" void dma_wait_recv() {
+  std::cout << "Called: " << __func__ << std::endl;
+}
+
+extern "C" int dma_check_recv() {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" unsigned int dma_set(unsigned int *dma_virtual_address, int offset,
+                                unsigned int value) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
+
+extern "C" unsigned int dma_get(unsigned int *dma_virtual_address, int offset) {
+  std::cout << "Called: " << __func__ << std::endl;
+  return 0;
+}
